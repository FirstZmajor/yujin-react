{"version":3,"sources":["components/MyContent.js","AppRouter.js","App.js","serviceWorker.js","index.js"],"names":["MyContent","state","color","className","layout","i","x","y","w","h","static","minW","maxW","cols","rowHeight","width","key","React","Component","Home","About","Topic","match","params","id","Topics","to","url","path","component","exact","render","Header","class","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","App","AppRouter","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uTAwBiBA,G,kBAnBb,aAAe,IAAD,8BACV,+CACKC,MAAQ,CAACC,MAAO,OAFX,E,sEAWZ,OAAO,kBAAC,IAAD,CAAYC,UAAU,SAASC,OALzB,CACX,CAACC,EAAG,IAAKC,EAAG,EAAGC,EAAG,EAAGC,EAAG,EAAGC,EAAG,EAAGC,QAAQ,GACzC,CAACL,EAAG,IAAKC,EAAG,EAAGC,EAAG,EAAGC,EAAG,EAAGC,EAAG,EAAGE,KAAM,EAAGC,KAAM,GAChD,CAACP,EAAG,IAAKC,EAAG,EAAGC,EAAG,EAAGC,EAAG,EAAGC,EAAG,IAEsBI,KAAM,GAAIC,UAAW,GAAIC,MAAO,MACtF,yBAAKZ,UAAU,WAAWa,IAAI,KAA9B,KACA,yBAAKb,UAAU,WAAWa,IAAI,KAA9B,KACA,yBAAKb,UAAU,WAAWa,IAAI,KAA9B,U,GAfkBC,IAAMC,YCc9B,SAASC,IACP,OAAO,kBAAC,EAAD,MAGT,SAASC,IACP,OAAO,qCAGT,SAASC,EAAT,GAA2B,IAAVC,EAAS,EAATA,MACf,OAAO,gDAAsBA,EAAMC,OAAOC,IAG5C,SAASC,EAAT,GAA4B,IAAVH,EAAS,EAATA,MAChB,OACE,6BACE,sCAEA,4BACE,4BACE,kBAAC,IAAD,CAAMI,GAAE,UAAKJ,EAAMK,IAAX,gBAAR,eAEF,4BACE,kBAAC,IAAD,CAAMD,GAAE,UAAKJ,EAAMK,IAAX,mBAAR,oBAIJ,kBAAC,IAAD,CAAOC,KAAI,UAAKN,EAAMM,KAAX,QAAuBC,UAAWR,IAC7C,kBAAC,IAAD,CACES,OAAK,EACLF,KAAMN,EAAMM,KACZG,OAAQ,kBAAM,0DAMtB,SAASC,IACP,OACE,6BACE,yBAAK7B,UAAU,eAEf,yBAAK8B,MAAM,iDACT,uBAAGA,MAAM,eAAeC,KAAK,KAA7B,UACA,4BAAQD,MAAM,iBAAiBE,KAAK,SAASC,cAAY,WAAWC,cAAY,sBAAsBC,gBAAc,qBAAqBC,gBAAc,QAAQC,aAAW,qBACxK,0BAAMP,MAAM,yBAEd,yBAAKA,MAAM,2BAA2BT,GAAG,sBACvC,yBAAKS,MAAM,cACT,uBAAGA,MAAM,4BAA2B,kBAAC,IAAD,CAAMP,GAAG,KAAT,SACpC,uBAAGO,MAAM,qBAAoB,kBAAC,IAAD,CAAMP,GAAG,UAAT,UAC7B,uBAAGO,MAAM,qBAAoB,kBAAC,IAAD,CAAMP,GAAG,WAAT,eAQ1Be,MAxEf,WACE,OACE,kBAAC,IAAD,KACE,6BACE,kBAACT,EAAD,MAEA,kBAAC,IAAD,CAAOF,OAAK,EAACF,KAAK,IAAIC,UAAWV,IACjC,kBAAC,IAAD,CAAOS,KAAK,SAASC,UAAWT,IAChC,kBAAC,IAAD,CAAOQ,KAAK,UAAUC,UAAWJ,O,kBCG1BgB,MARf,WACE,OACE,yBAAKtC,UAAU,OACX,kBAACuC,EAAD,QCEYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASxB,MACvB,2DCZNyB,IAAShB,OAAO,kBAAC,EAAD,MAASiB,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.69663074.chunk.js","sourcesContent":["import React from 'react';\nimport GridLayout from 'react-grid-layout';\nimport '../App.css';\n\nclass MyContent extends React.Component {\n    constructor() {\n        super();\n        this.state = {color: \"red\"};\n      }\n\n    render() {\n      var layout = [\n        {i: 'a', x: 0, y: 0, w: 1, h: 2, static: false},\n        {i: 'b', x: 1, y: 0, w: 3, h: 2, minW: 2, maxW: 4},\n        {i: 'c', x: 4, y: 0, w: 1, h: 2}\n      ];\n      return <GridLayout className=\"layout\" layout={layout} cols={12} rowHeight={30} width={1200}>\n      <div className=\"my-arias\" key=\"a\">a</div>\n      <div className=\"my-arias\" key=\"b\">b</div>\n      <div className=\"my-arias\" key=\"c\">c</div>\n    </GridLayout>;\n    }\n  }\n\n  export default MyContent;","import React from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport MyContent from './components/MyContent';\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Header />\n\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/about\" component={About} />\n        <Route path=\"/topics\" component={Topics} />\n      </div>\n    </Router>\n  );\n}\n\nfunction Home() {\n  return <MyContent />;\n}\n\nfunction About() {\n  return <h2>About</h2>;\n}\n\nfunction Topic({ match }) {\n  return <h3>Requested Param: {match.params.id}</h3>;\n}\n\nfunction Topics({ match }) {\n  return (\n    <div>\n      <h2>Topics</h2>\n\n      <ul>\n        <li>\n          <Link to={`${match.url}/components`}>Components</Link>\n        </li>\n        <li>\n          <Link to={`${match.url}/props-v-state`}>Props v. State</Link>\n        </li>\n      </ul>\n\n      <Route path={`${match.path}/:id`} component={Topic} />\n      <Route\n        exact\n        path={match.path}\n        render={() => <h3>Please select a topic.</h3>}\n      />\n    </div>\n  );\n}\n\nfunction Header() {\n  return (\n    <div>\n      <div className=\"App-header\">\n      </div>\n      <nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <a class=\"navbar-brand\" href=\"#\">Navbar</a>\n        <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span class=\"navbar-toggler-icon\"></span>\n        </button>\n        <div class=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\n          <div class=\"navbar-nav\">\n            <a class=\"nav-item nav-link active\"><Link to=\"/\">Home</Link></a>\n            <a class=\"nav-item nav-link\"><Link to=\"/about\">About</Link></a>\n            <a class=\"nav-item nav-link\"><Link to=\"/topics\">Topics</Link></a>\n          </div>\n        </div>\n      </nav>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport AppRouter from './AppRouter'\nimport './App.css';\nimport 'react-grid-layout/css/styles.css';\nimport 'react-resizable/css/styles.css';\nimport 'bootstrap/dist/css/bootstrap.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <AppRouter />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}